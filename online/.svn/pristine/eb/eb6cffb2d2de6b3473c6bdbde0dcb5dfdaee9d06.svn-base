<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="me.ckhd.opengame.online.dao.OnlinePayDao">
	<sql id="OnlinePayColumns">
		a.id,
		a.channelId,
		a.ckAppId,
		a.childCkAppId,
		a.appId,
		a.version,
		a.prepayid,
		a.orderId,
		a.orderStatus,
		a.appPayContent,
		a.payType,
		a.sdkType,
		a.gameOnline,
		a.userId,
		a.extension,
		a.prices,
		a.productId,
		a.actualAmount,
		a.channelOrderId,
		a.sendNum,
		a.sendStatus,
		a.content,
		a.callBackUrl,
		a.errMsg,
		a.channelPayContent,
		a.callBackContent,
		a.create_date,
		a.update_date
	</sql>

	<!-- 根据渠道号,sid,ckappid获得渠道 -->
	<select id="get" resultType="OnlinePay">
		SELECT
		<include refid="OnlinePayColumns" />
		FROM app_online_pay a
		WHERE a.orderId=#{orderId}
	</select>

	<!-- 更新订单信息 -->
	<update id="update">
		UPDATE app_online_pay SET
		callBackContent =#{callBackContent},
		content =#{content},
		sendNum =#{sendNum},
		sendStatus=#{sendStatus},
		actualAmount=#{actualAmount},
		channelOrderId=#{channelOrderId},
		update_date = #{updateDate},
		orderStatus= #{orderStatus},
		<if test="isTest != null and isTest != '' ">
			isTest=#{isTest},
		</if>
		<if test="prepayid != null and prepayid != '' ">
			prepayid=#{prepayid},
		</if>
		errMsg = #{errMsg}
		WHERE orderId=#{orderId}
	</update>

	<select id="getCount" resultType="int">
		SELECT
		count(*)
		FROM
		app_online_pay a
		WHERE ckAppId=#{orderId}
	</select>
	<!-- 插入数据-->
	<insert id="insert">
		INSERT INTO app_online_pay(
		id,
		channelId,
		ckAppId,
		appId,
		version,
		payType,
		sdkType,
		prepayid,
		orderId,
		gameOnline,
		orderStatus,
		errMsg,
		userId,
		extension,
		prices,
		productId,
		actualAmount,
		channelOrderId,
		content,
		callBackUrl,
		sendNum,
		sendStatus,
		appPayContent,
		channelPayContent,
		create_date
		) VALUES (
		#{id},
		#{channelId},
		#{ckAppId},
		#{appId},
		#{version},
		#{payType},
		#{sdkType},
		#{prepayid},
		#{orderId},
		#{gameOnline},
		#{orderStatus},
		#{errMsg},
		#{userId},
		#{extension},
		#{prices},
		#{productId},
		#{actualAmount},
		#{channelOrderId},
		#{content},
		#{callBackUrl},
		#{sendNum},
		#{sendStatus},
		#{appPayContent},
		#{channelPayContent},
		#{createDate}
		)
	</insert>
	<select id="selectWaitSend" resultType="OnlinePay">
		select 
		<include refid="OnlinePayColumns" />
		from app_online_pay a
		where sendStatus='3' and sendNum &lt;=3 limit 0,10
	</select>
	
	<update id="updateSendFail">
		update app_online_pay set
		sendNum = #{sendNum},
		sendStatus=#{sendStatus}
		where id = #{id}
	</update>


	<update id="updateSendSucess">
		update app_online_pay set
		sendStatus = '4'
		where id =#{id}
	</update>


	<select id="getOrderId" resultType="Integer">
		select nextnumber as orderId
		from app_order_number where ckappid=#{ckAppId} and year=#{year} FOR
		UPDATE
	</select>
	<!-- <![CDATA[ {call PROCEDURE_ORDER_NUMBER ( #{orderId,mode=OUT,jdbcType=INTEGER}, 
		#{year,mode=IN,jdbcType=VARCHAR}, #{ckAppId,mode=IN,jdbcType=VARCHAR} )} 
		]]> -->

	<update id="updateOrderId">
		update app_order_number SET nextnumber= #{num} where ckappid=#{ckAppId} and
		year=#{year}
	</update>

	<insert id="insertOrderId">
		insert app_order_number(ckappid,year,nextnumber)
		values(#{ckAppId},#{year},#{num})
	</insert>

	<select id="getOrderByOrderId" resultType="OnlinePay">
		select
		<include refid="OnlinePayColumns" />
		from app_online_pay a
		where a.orderId=#{orderId}
	</select>
	
	<select id="getOrderById" resultType="OnlinePay">
		select
		<include refid="OnlinePayColumns" />
		from app_online_pay a left join app_online_orderIndex b on a.orderId=b.orderId
		where b.id = #{orderId}
	</select>
	
	<select id="getOrderByPrepayid" resultType="OnlinePay">
		select
		<include refid="OnlinePayColumns" />
		from app_online_pay a 
		where a.prepayid= #{orderId}
	</select>
	
	<select id="getOrderByChannelOrderId" resultType="OnlinePay">
		select
		<include refid="OnlinePayColumns" />
		from app_online_pay a 
		where a.channelOrderId = #{channelOrderId} and a.channelId=#{channelId}
	</select>
	
	<select id="getOrderByChannelOrderIdOther" resultType="OnlinePay">
		select
		<include refid="OnlinePayColumns" />
		from app_online_pay a 
		where a.channelOrderId = #{channelOrderId}
	</select>
	
	<select id="getRdOrderByOrderId" resultType="OnlinePay">
		select
		<include refid="OnlinePayColumns" />
		from app_online_pay a
		where a.orderId=#{orderId}
	</select>
 	 
 	 <!-- 分页查询网咯支付回调信息 -->
	<select id="findList" resultType="OnlinePay">
		SELECT 
			<include refid="OnlinePayColumns" />
		FROM app_online_pay a
		WHERE ckappid = #{ckAppId}
		<if test="channelId != null and channelId != ''">
			AND channelid = #{channelId}
		</if>
		<if test="payType != null and payType != ''">
			AND payType = #{payType}
		</if>
		<if test="appId != null and appId != ''">
			AND appId = #{appId}
		</if>
		<if test="orderStatus != null and orderStatus != ''">
		 	AND orderStatus = #{orderStatus}
		</if>
		<if test="orderId != null and orderId != ''">
			AND ( orderId like '%${orderId}%' or channelOrderId like '%${orderId}%' )
		</if>
		<if test="userId != null and userId != ''">
		 	AND userId like '%${userId}%'
		</if>
		 AND create_date BETWEEN #{startDate} AND #{endDate} 
		<choose>
			<when test="page !=null and page.orderBy != null and page.orderBy != ''">
				ORDER BY ${page.orderBy}
			</when>
			<otherwise>
				ORDER BY create_date desc
			</otherwise>
		</choose>
	</select>
	
	<select id="stats" parameterType="OnlinePay" resultType="java.util.HashMap">
		SELECT 
			IFNULL(a.mdate,"总计") AS mdate,
			a.ckAppId,
		    a.total_num,
		    a.non_payment,
		    a.fail_order,
		    a.fail_payment,
		    a.succ_payment,
		    a.succ_num,
		    a.fail_num,
		    (a.succ_num / a.total_num) AS succ_rate,
		    IFNULL(a.actualAmount,0) AS actualAmount,
		    a.succ_actual,
		    IFNULL((a.succ_actual/ a.actualAmount),0) AS succ_actual_rate
		FROM
		    (
   		    SELECT 
		    DATE_FORMAT(create_date, '%Y-%m-%d') AS mdate,
		    ckAppId,
		    COUNT(0) AS total_num,
		    COUNT(CASE 
			when orderStatus = '0' THEN 1
			ELSE NULL 
		    END) AS	non_payment,
		     COUNT(CASE 
			when orderStatus = '-1' THEN 1
			ELSE NULL
		    END) AS	fail_order,
		    COUNT(CASE 
			when orderStatus = '1' THEN 1
			ELSE NULL 
		    END) AS fail_payment,
		    COUNT(CASE 
			when orderStatus = '2' THEN 1
			ELSE NULL 
		    END) AS succ_payment,
		    COUNT(CASE 
			when orderStatus = '3' THEN 1
			ELSE NULL 
		    END) AS succ_num,
		    COUNT(CASE 
			when orderStatus = '4' THEN 1 
			ELSE NULL 
		    END) AS fail_num,
		    SUM(actualAmount)/100 as actualAmount,
		    SUM(CASE when orderstatus='3' 
		    THEN actualAmount 
		    ELSE 0 
		    END)/100 as succ_actual 
		    FROM app_online_pay
			WHERE  isTest = #{isTest}
			<if test="ckAppId != null and ckAppId != ''">
				and ckAppid=#{ckAppId}
			</if>
			<if test="appId != null and appId != ''">
				AND appId = #{appId}
			</if>
			<if test="payType != null and payType != ''">
				AND payType = #{payType}
			</if>
			<if test="channelId != null and channelId != ''">
				AND channelid = #{channelId}
			</if>
			 and create_date BETWEEN #{startDate} AND #{endDate} 
			 <if test="isTotal ==null or isTotal == ''">
			 GROUP BY DATE_FORMAT(create_date, '%Y-%m-%d'),ckAppId
			 </if> 
		) AS a
	</select>
	
	<select id="statsByChannel" parameterType="OnlinePay" resultType="java.util.HashMap">
		select 
			ckAppId,
			channelId,
			count(0) as channel_total_num,
			SUM(actualAmount)/100 as actualAmount,
			SUM(CASE when orderstatus='3' THEN actualAmount 
		    ELSE 0 
		    END)/100 as succ_actual,
		    SUM(CASE when orderstatus='4' THEN actualAmount 
		    ELSE 0 
		    END)/100 as fail_actual 
		FROM app_online_pay
		WHERE  isTest = #{isTest}
			<if test="ckAppId != null and ckAppId != ''">
				and ckAppid=#{ckAppId}
			</if>
			<if test="channelId != null and channelId != ''">
				AND channelid = #{channelId}
			</if>
			<if test="payType != null and payType != ''">
				AND payType = #{payType}
			</if>
			<if test="appId != null and appId != ''">
				AND appId = #{appId}
			</if>
		and create_date BETWEEN #{startDate} AND #{endDate} 
		group by channelId,ckAppId
	</select>
	
	<select id="statsByOnlinePaycode" parameterType="OnlinePay" resultType="java.util.HashMap">
		SELECT 
			ckAppId,
			paycode_name,
			sum(total_num) AS total_num,
			sum(succ_num) AS succ_num,
			sum(actualAmount) AS actualAmount,
			sum(succ_actual) AS succ_actual
			FROM(
				SELECT(
					SELECT DISTINCT c. NAME 
						FROM app_online_paycode c 
						WHERE c.channelid ='' 
						AND c.ckappid = p.ckAppId 
						AND c.productid = p.productid
						AND c.paytype=p.paytype
			 ) AS paycode_name, 
			 p.ckAppId,
			 COUNT(0) AS total_num,
			 COUNT( CASE 
		 		WHEN p.orderStatus = '3' 
		 		THEN 1 
		 		ELSE NULL 
		 		END ) AS succ_num,
			 SUM(p.actualAmount) / 100 
			 AS actualAmount, 
			 SUM(CASE 
			 	WHEN p.orderstatus = '3' 
			 	THEN p.actualAmount 
			 	ELSE 0 
			 	END ) / 100 AS succ_actual 
			 FROM app_online_pay p 
			 WHERE  isTest = #{isTest}
			 <if test="ckAppId != null and ckAppId != ''">
				and ckAppid=#{ckAppId}
			</if>
			<if test="channelId != null and channelId != ''">
				AND channelid = #{channelId}
			</if>
			<if test="payType != null and payType != ''">
				AND payType = #{payType}
			</if>
			<if test="appId != null and appId != ''">
				AND appId = #{appId}
			</if>
			and create_date BETWEEN #{startDate} AND #{endDate}  
		group by productid,ckAppId) m group by paycode_name,ckAppId;
	</select>
		
	<!-- 获取订单序号 -->
	<select id="getOrderIndex" resultType="int">
		select id from app_online_orderIndex a where a.orderId=#{orderId}
	</select>
	
	<!-- 获取最大序号 -->
	<select id="getMaxOrderIndex" resultType="int">
		select IFNULL(max(id),0)+1 as maxIndex  from app_online_orderIndex
	</select>
	
	<insert id="saveOrderIndex">
	    INSERT INTO app_online_orderIndex(id,orderId,createTime) values(#{id},#{orderId},now())
	</insert>
	
	<insert id="getOrderIdByIndex">
	    select orderId from app_online_orderIndex where id=#{id}
	</insert>
	
	<!-- 获取imsi的支付次数 -->
	<select id="getCountByImsi" resultType="java.lang.Integer">
		SELECT COUNT(0) num FROM ${type}_app_order a 
		WHERE a.`ackType`=#{ackType} 
		AND a.`ckAppId`=#{ckAppId} 
		AND a.`ckChannelId`=#{ckChannelId} 
		AND a.`mmAppId`=#{mmAppId} 
		AND a.`imsi`=#{imsi}
	</select>
	
	<select id="statsByChannelPaycode" resultType="java.util.HashMap">
		SELECT 
			p.ckAppId,
		    p.channelId,
		    p.productid,
		    (SELECT c.NAME 
						FROM app_online_paycode c 
						WHERE c.channelid = p.channelId AND c.ckappid = p.ckAppId AND c.productid = p.productid
			union SELECT c. NAME 
						FROM app_online_paycode c 
						WHERE c.channelid ='' 
						AND c.ckappid = p.ckAppId 
						AND c.productid = p.productid 
						AND c.paytype = p.paytype
						limit 0,1
			 ) AS paycode_name, 
		    COUNT(0) AS total_num,
		    COUNT( CASE 
		 		WHEN p.orderStatus = '3' 
		 		THEN 1 
		 		ELSE NULL 
		 		END ) AS succ_num,
		     SUM(p.actualAmount) / 100 
			 AS actualAmount, 
			 SUM(CASE 
			 	WHEN p.orderstatus = '3' 
			 	THEN p.actualAmount 
			 	ELSE 0 
			 	END ) / 100 AS succ_actual 
		 FROM app_online_pay p 
		 WHERE  isTest = #{isTest}
			<if test="ckAppId != null and ckAppId != ''">
				and ckAppid=#{ckAppId}
			</if>
			<if test="channelId != null and channelId != ''">
				AND channelid = #{channelId}
			</if>
			<if test="payType != null and payType != ''">
				AND payType = #{payType}
			</if>
			<if test="appId != null and appId != ''">
				AND appId = #{appId}
			</if>
			and create_date BETWEEN #{startDate} AND #{endDate}
		GROUP BY p.channelId, p.productid ,p.ckAppId
	</select>
	
</mapper>