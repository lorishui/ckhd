package me.ckhd.opengame.online.handle;

import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.URL;
import java.util.Locale;

import javax.net.ssl.HttpsURLConnection;
import javax.net.ssl.SSLContext;
import javax.net.ssl.TrustManager;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import me.ckhd.opengame.app.entity.PayInfoConfig;
import me.ckhd.opengame.common.utils.StringUtils;
import me.ckhd.opengame.online.entity.OnlinePay;
import me.ckhd.opengame.online.entity.OnlineUser;
import me.ckhd.opengame.online.request.appstore.BaseHttpSSLSocketFactory.TrustAnyHostnameVerifier;

import org.springframework.stereotype.Component;

import com.alibaba.fastjson.JSONObject;
import com.nearme.oauth.net.TrustAnyTrustManager;

@Component("appstore")
public class appstoreHandle extends BaseHandle{

	public static final String url_sandbox="https://sandbox.itunes.apple.com/verifyReceipt"; //沙盒测试
	public static final String url_verify="https://buy.itunes.apple.com/verifyReceipt";//正式地址
	public boolean isSuccess = false;
	public String productId = "";
	public int responseCode = 2015;
	
	@Override
	public String login(OnlineUser onlineUser, JSONObject codeJson,
			PayInfoConfig payInfo) {
		JSONObject result = new JSONObject();
		result.put("resultCode", -1);
		JSONObject verifyInfo = codeJson.getJSONObject("verifyInfo");
		String uid = verifyInfo.containsKey("userId")?verifyInfo.getString("userId"):"";
		onlineUser.setSid(uid);
		returnLoginSuccess(result, onlineUser);
		return result.toJSONString();
	}
	
	@Override
	public String pay(OnlinePay onlinePay,JSONObject codeJson){
		JSONObject result = new JSONObject();
		result.put("resultCode",0);
		result.put("errMsg","SUCCESS");
		JSONObject data = new JSONObject();
		data.put("orderId", onlinePay.getOrderId());
		if(StringUtils.isNotBlank(onlinePay.getPayInfoConfig().getNotifyUrl())){
			data.put("callBackUrl", onlinePay.getPayInfoConfig().getNotifyUrl());
		}else{
			data.put("callBackUrl", "http://ol.haifurong.cn/netpay/callback/appstore/1.1.0/");
		}
		data.put("payCode", onlinePay.getPayCodeConfig().getExInfoMap().get("payCode"));
		result.put("result", data);
		return result.toJSONString();
	}
	
	@Override
	public void parseParamter(String code, HttpServletRequest request,
			OnlinePay onlinePay) {
		respData = JSONObject.parseObject(code);
		log.info("appstore start");
//		AppStoreVerify.getIosResponseData(respData);
		String url = url_verify;
		//苹果客户端传上来的数据,是最原始的加密数据
//		String encData = map.get("receipt")!= null?map.get("receipt").toString():"";
		int n = 0;
		log.info("appstore encData:"+respData.toJSONString());
		String data = postThree(respData.getString("receipt"), url,n);
		log.info("appstore responseData="+data);
		if(data==null){  
            //苹果服务器没有返回验证结果  
			onlinePay.setErrMsg("请求验证异常或超时");//请求验证异常
			responseCode = 2016;//请求超时
        }else{
        	//跟苹果验证有返回结果------------------  
            JSONObject json = JSONObject.parseObject(data);
            String states=json.getString("status"); 
            if(states.equals("0")){//验证成功  
            	respData.put("responseData", data);
            	JSONObject receiptJson = JSONObject.parseObject(json.getString("receipt"));   	
            	String transaction_id = receiptJson.getString("transaction_id");
            	String product_id = receiptJson.getString("product_id");
            	productId = product_id;
            	if(!product_id.equals(respData.getString("productId"))){
            		onlinePay.setErrMsg("计费点不对应");//计费点不对应
            	}else{
            		isSuccess = true;
            		onlinePay.setErrMsg("验证成功");//计费点不对应
            	}
            	onlinePay.setChannelOrderId(transaction_id);
            }else if(states.equals("21007")){//切换到沙盒
            	onlinePay.setIsTest(1);
            	url = url_sandbox;
        		data = postThree(respData.getString("receipt"), url,0);
        		log.info("appstore_sandbox responseData="+data);
        		respData.put("responseData", data);
        		if( StringUtils.isNotBlank(data) ){
	        		//跟苹果验证有返回结果------------------  
	                json = JSONObject.parseObject(data);
	                states=json.getString("status"); 
	                if(states.equals("0")){
	                	JSONObject receiptJson = JSONObject.parseObject(json.getString("receipt"));   	
	                	String transaction_id = receiptJson.getString("transaction_id");
	                	String product_id = receiptJson.getString("product_id");
	                	productId = product_id;
	                	if(!product_id.equals(respData.getString("productId"))){
	                		onlinePay.setErrMsg("计费点不对应");//计费点不对应
	                	}else{
	                		isSuccess = true;
	                		onlinePay.setErrMsg("验证成功");//计费点不对应
	                	}
	                	onlinePay.setChannelOrderId(transaction_id);
	                }else{
	                	onlinePay.setErrMsg("苹果code不为零");//苹果code不为零
	                }
        		}else{
        			onlinePay.setErrMsg("请求验证异常或超时");//请求验证异常
        			responseCode = 2016;//请求超时
        		}
            }else{
            	onlinePay.setErrMsg("苹果code不为零");//苹果code不为零
            }
        } 
		log.info("appstore end");
		if(respData.size() > 0){
			onlinePay.setOrderId(respData.getString("orderId"));
			onlinePay.setActualAmount(respData.getString("amount"));
			onlinePay.setCallBackContent(respData!=null?respData.toJSONString():code);
		}
	}

	public String postThree(String encData,String url,int n){
		String data = null;
		if( n <= 3){
			n++;
			data = buyAppVerify(encData, url);
			if(StringUtils.isNotBlank(data)){
				return data;
			}else{
				return postThree(encData, url,n);
			}
		}
		return data;
	}
	/** 
     * 苹果服务器验证 
     * @param receipt 账单 
     * @url 要验证的地址 
     * @return null 或返回结果 
     * 沙盒   https://sandbox.itunes.apple.com/verifyReceipt 
     *  
     */  
    public String buyAppVerify(String receipt,String url){     
       log.info("appstore data:"+receipt);
       log.info("appstore url:"+url);
       try{  
           SSLContext sc = SSLContext.getInstance("SSL");  
           sc.init(null, new TrustManager[]{new TrustAnyTrustManager()}, new java.security.SecureRandom());  
           URL console = new URL(url);  
           HttpsURLConnection conn = (HttpsURLConnection) console.openConnection();  
           conn.setSSLSocketFactory(sc.getSocketFactory());  
           conn.setHostnameVerifier(new TrustAnyHostnameVerifier());  
           conn.setRequestMethod("POST");  
           conn.setRequestProperty("content-type", "text/json");  
           conn.setRequestProperty("Proxy-Connection", "Keep-Alive");  
           conn.setDoInput(true);  
           conn.setDoOutput(true);  
           BufferedOutputStream hurlBufOus=new BufferedOutputStream(conn.getOutputStream());  
             
           String str= String.format(Locale.CHINA,"{\"receipt-data\":\"" + receipt+"\"}");  
           hurlBufOus.write(str.getBytes());  
           hurlBufOus.flush();  
           InputStream is = conn.getInputStream();  
	       BufferedReader reader=new BufferedReader(new InputStreamReader(is));  
	       String line = null;  
	       StringBuffer sb = new StringBuffer();  
	       while((line = reader.readLine()) != null){  
	          sb.append(line);  
	       }
	       return sb.toString();  
       }catch(Exception ex){  
    	   log.error("appstore http throws exception!", ex);  
       }  
       return null;  
    }
	
	@Override
	public String verifyData(OnlinePay onlinePay, JSONObject result,
			HttpServletResponse response) {
		onlinePay.setActualAmount(String.valueOf(onlinePay.getPrices()));
		if(isSuccess){
			if( productId.equals(onlinePay.getPayCodeConfig().getExInfoMap().get("payCode"))){
				result.put("code", 2000);
				return getReturnSuccess();
			}else{
				result.put("code", 4019);
				result.put("errMsg", "刷单,计费点异常！");
				return getReturnFailure();
			}
		}else{
			result.put("code", 4016);
			result.put("errMsg", "验证请求异常！");
			return getReturnFailure();
		}
	}

	@Override
	public String getReturnSuccess() {
		JSONObject json = new JSONObject();
		json.put("resultCode", 0);
		json.put("resultMsg", "");
		return json.toJSONString();
	}
	
	public String getReturnFailure() {
		JSONObject json = new JSONObject();
		json.put("resultCode", responseCode);
		json.put("resultMsg", "订单重复!");
		return json.toJSONString();
	}

}
