package me.ckhd.opengame.buyflow.web;

import java.math.BigDecimal;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import me.ckhd.opengame.buyflow.entity.BuyFlowRetainIncomeStats;
import me.ckhd.opengame.buyflow.entity.BuyFlowRetainStats;
import me.ckhd.opengame.buyflow.entity.BuyFlowStat;
import me.ckhd.opengame.buyflow.service.BuyFlowRetainIncomeStatsService;
import me.ckhd.opengame.buyflow.service.BuyFlowRetainStatsService;
import me.ckhd.opengame.buyflow.service.BuyFlowStatService;
import me.ckhd.opengame.common.persistence.Verdict;
import me.ckhd.opengame.common.utils.StringUtils;
import me.ckhd.opengame.common.web.BaseController;

import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;

@Controller
@RequestMapping(value = "${adminPath}/buyflow/stat")
public class BuyFlowStatController extends BaseController {
	@Autowired
	private BuyFlowStatService buyFlowStatService;
	
	@Autowired
	private BuyFlowRetainStatsService buyFlowRetainStatsService;

	@Autowired
	private BuyFlowRetainIncomeStatsService buyFlowRetainIncomeStatsService;
	
	@RequiresPermissions("buyflow:stat:view")
	@RequestMapping(value = { "list", "" })
	public String list(BuyFlowStat buyFlowStat, HttpServletRequest request,
			HttpServletResponse response, Model model) {
		if ( !Verdict.isAllow(buyFlowStat.getCkappId())) {
			return "403";
		}
		BuyFlowStat param = null;
		List<BuyFlowStat> list = new ArrayList<BuyFlowStat>();
		try {
			param = (BuyFlowStat) buyFlowStat.clone();
			Calendar cal = Calendar.getInstance();
			cal.setTime(new Date());
			getSelectedCondition(buyFlowStat);
			if( StringUtils.isBlank(buyFlowStat.getStartDate()) || StringUtils.isBlank(buyFlowStat.getEndDate()) ){
				SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd");
				SimpleDateFormat sdf2 = new SimpleDateFormat("yyyy-MM-dd");
				cal.add(Calendar.DAY_OF_MONTH, -1);
				buyFlowStat.setEndDate(sdf.format(cal.getTime()));
				param.setEndDate(sdf2.format(cal.getTime()));

				cal.add(Calendar.DAY_OF_MONTH, -3);
				buyFlowStat.setStartDate(sdf.format(cal.getTime()));
				param.setStartDate(sdf2.format(cal.getTime()));
			}else{
				buyFlowStat.setStartDate(buyFlowStat.getStartDate().replace("-", ""));
				buyFlowStat.setEndDate(buyFlowStat.getEndDate().replace("-", ""));
			}
			list = buyFlowStatService.findList(buyFlowStat);
			
			logger.info("queryRetainStats:" + queryRetainStats("", "20170601", "20170607").toString());
			logger.info("queryRetainIncome:" + queryRetainIncome("", "20170401", "20170607").toString());
			
		} catch (Exception e) {
			logger.error("", e);
		}
		BuyFlowStat total = new BuyFlowStat();
		if(list.size() > 0){
			for (BuyFlowStat bfs : list) {
				total.setClickNum(total.getClickNum()+bfs.getClickNum());
				total.setDeviceClickNum(total.getDeviceClickNum()+bfs.getDeviceClickNum());
				total.setActiveNum(total.getActiveNum()+bfs.getActiveNum());
				total.setRegisterNum(total.getRegisterNum()+bfs.getRegisterNum());
			}
		}
		model.addAttribute("total", total);
		model.addAttribute("data", list);
		model.addAttribute("buyFlowStat",param);
		return "modules/buyflow/buyFlowStat";
	}
	
	/**
	 * 从   (20170101-20170105  xxx活动/xxx渠道)日期处点入，获取每日XXX活动数据   
	 * @param buyFlowStat
	 * @return
	 */
	@RequestMapping("data")
	@ResponseBody
	public String getData(BuyFlowStat buyFlowStat){
		int group = buyFlowStat.getGroup();
		buyFlowStat.setGroupBy("statsDate");
		buyFlowStat.setStartDate(buyFlowStat.getStartDate().replace("-", ""));
		buyFlowStat.setEndDate(buyFlowStat.getEndDate().replace("-", ""));
		List<BuyFlowStat> list = buyFlowStatService.getData(buyFlowStat);
		JSONArray jsonData = getJsonData(list,group,buyFlowStat);
		
		return jsonData.toJSONString();
	}
	
	

	/**
	 * 从(20170101  汇总) 点入   获取当日 每个  活动/渠道  数据
	 * 获取
	 * @param buyFlowStat
	 * @return
	 */
	@RequestMapping("dayData")
	@ResponseBody
	public String getDayData(BuyFlowStat buyFlowStat){
		int group = buyFlowStat.getGroup();
		if(group == 0){
			buyFlowStat.setGroupBy("media");
		}else if(group == 1){
			buyFlowStat.setGroupBy("buyFlowName");
		}
		List<BuyFlowStat> list = buyFlowStatService.getDayData(buyFlowStat);
		
		JSONArray jsonData = getJsonData(list,group,buyFlowStat);
		return jsonData.toJSONString();
	}
	
	
	/**
	 * 从(20170101-20170105  XXX媒体 )媒体处点入 ，获取此 时间段 此 媒体  所有  活动数据 
	 * @param buyFlowStat
	 * @return
	 */
	@RequestMapping("mediaData")
	@ResponseBody
	public String getMediaData(BuyFlowStat buyFlowStat){
		buyFlowStat.setGroupBy("buyFlowName");
		buyFlowStat.setStartDate(buyFlowStat.getStartDate().replace("-", ""));
		buyFlowStat.setEndDate(buyFlowStat.getEndDate().replace("-", ""));
		List<BuyFlowStat> list = buyFlowStatService.getMediaData(buyFlowStat);
		JSONArray jsonData = getJsonData(list,1,buyFlowStat);
		return jsonData.toJSONString();
	}
	
	/**
	 * 从(20170101  XXX媒体)媒体处点入  获取 此日期  此媒体  所有活动数据
	 * @param buyFlowStat
	 * @return
	 */
	@RequestMapping("dayMediaData")
	@ResponseBody
	public String getDayMediaData(BuyFlowStat buyFlowStat){
		buyFlowStat.setGroupBy("buyFlowName");
		List<BuyFlowStat> list = buyFlowStatService.getDayMediaData(buyFlowStat);
		JSONArray jsonData = getJsonData(list,1,buyFlowStat);
		return jsonData.toJSONString();
	}
	
	/**
	 * 拼装新增活跃数据
	 * @param list
	 * @param group
	 * @param buyFlowStat 
	 * @return
	 */
	private JSONArray getJsonData(List<BuyFlowStat> list, int group, BuyFlowStat buyFlowStat) {
		Map<String, Long> ltvMap = new HashMap<String, Long>();
		Map<String, Long> retenMap = new HashMap<String, Long>();
		if(group == 1){
			if(StringUtils.isNotBlank(buyFlowStat.getStatsDate())){
				buyFlowStat.setStartDate(buyFlowStat.getStatsDate());
				buyFlowStat.setEndDate(buyFlowStat.getStatsDate());
			}
			ltvMap = queryRetainIncome(null, buyFlowStat.getStartDate().replace("-", ""), buyFlowStat.getEndDate().replace("-", ""));
			retenMap = queryRetainStats(null, buyFlowStat.getStartDate().replace("-", ""), buyFlowStat.getEndDate().replace("", ""));
		}
		DecimalFormat df = new DecimalFormat("#.##");
		JSONArray jsonArray = new JSONArray();
		for (int i = 0; i < list.size(); i++) {
			JSONObject jo = new JSONObject();
			BuyFlowStat bfs = list.get(i);
			jo.put("date", bfs.getStatsDate());
			int clickNum = bfs.getClickNum();
			int deviceClickNum = bfs.getDeviceClickNum();
			int activeNum = bfs.getActiveNum();
			int registerNum = bfs.getRegisterNum();
			jo.put("clickNum",clickNum);
			jo.put("deviceClickNum", deviceClickNum);
			jo.put("activeNum", activeNum);
			jo.put("activeRate", (deviceClickNum!=0?df.format(activeNum/(clickNum*0.01)):0) + "%");
			jo.put("registerNum", registerNum);
			jo.put("registerRate", (activeNum!=0?df.format(registerNum/(activeNum*0.01)):0) + "%");
			if(group == 0){
				jo.put("name", bfs.getMedia());
			}
			if(group == 1){
				jo.put("name",bfs.getBuyFlowName());
				// 0-7日总付费，key like 2000_1_WeAD_1_20170608_7    ltv数据
				// 7留活跃数：key like 2000_1_WeAD_1_20170608_7		留存数据
				StringBuilder ltvKey = new StringBuilder();
				ltvKey.append(bfs.getCkappId()).append("_").append(bfs.getChildCkappId()).append("_")
					.append(bfs.getMedia()).append("_").append(bfs.getAdItem()).append("_")
					.append(bfs.getStatsDate()).append("_");
				String baseKey = ltvKey.toString();
				long reten0 = retenMap.containsKey(baseKey+"0")?retenMap.get(baseKey+"0"):0;
				long reten1 = retenMap.containsKey(baseKey+"1")?retenMap.get(baseKey+"1"):0;
				long reten3 = retenMap.containsKey(baseKey+"3")?retenMap.get(baseKey+"3"):0;
				long reten7 = retenMap.containsKey(baseKey+"7")?retenMap.get(baseKey+"7"):0;
				long reten30 = retenMap.containsKey(baseKey+"30")?retenMap.get(baseKey+"30"):0;
				long ltv0 = ltvMap.containsKey(baseKey+"0")?ltvMap.get(baseKey+"0"):0;
				long ltv1 = ltvMap.containsKey(baseKey+"1")?ltvMap.get(baseKey+"1"):0;
				long ltv7 = ltvMap.containsKey(baseKey+"7")?ltvMap.get(baseKey+"7"):0;
				long ltv30 = ltvMap.containsKey(baseKey+"30")?ltvMap.get(baseKey+"30"):0;
				long ltv60 = ltvMap.containsKey(baseKey+"60")?ltvMap.get(baseKey+"60"):0;
				jo.put("reten1", reten0!=0?df.format(reten1/(reten0*0.01)) + "%" : "--");
				jo.put("reten3", reten0!=0?df.format(reten3/(reten0*0.01)) + "%" : "--");
				jo.put("reten7", reten0!=0?df.format(reten7/(reten0*0.01)) + "%" : "--");
				jo.put("reten30", reten0!=0?df.format(reten30/(reten0*0.01)) + "%" : "--");
				jo.put("ltv0", reten0!=0?df.format(ltv0/(reten0+0.00001)) + "" : "--");
				jo.put("ltv1", reten0!=0?df.format(ltv1/(reten0+0.00001)) + "" : "--");
				jo.put("ltv7", reten0!=0?df.format(ltv7/(reten0+0.00001)) + "" : "--");
				jo.put("ltv30", reten0!=0?df.format(ltv30/(reten0+0.00001)) + "" : "--");
				jo.put("ltv60", reten0!=0?df.format(ltv60/(reten0+0.00001)) + "" : "--");
			}
			
			
			jsonArray.add(jo);
		}
		return jsonArray;
	}
	
	

	private void getSelectedCondition(BuyFlowStat buyFlowStat) {
		if(buyFlowStat.getGroupByDay() == 0){	
			if(buyFlowStat.getGroup() == 0){
				buyFlowStat.setGroupBy("media");
			}else {
				buyFlowStat.setGroupBy("buyFlowName");
			}
		}
		if(buyFlowStat.getGroupByDay() == 1){
			buyFlowStat.setGroupBy("stats_date");
//			if(buyFlowStat.getGroup() == 0){
//				buyFlowStat.setGroupBy(buyFlowStat.getGroupBy() + ",media");
//			}else {
//				buyFlowStat.setGroupBy(buyFlowStat.getGroupBy() + ",buyFlowName");
//			}
		}
	}
	/**
	 * 留存1,3,7,30,60
	 */
	private Map<String, Long> queryRetainStats(String method,String startDate, String endDate){
		
		BuyFlowRetainStats vo = new BuyFlowRetainStats();
		vo.setStartDate(startDate);
		vo.setEndDate(endDate);
		// 7留活跃数：key like 2000_1_WeAD_1_20170608_7
		return buyFlowRetainStatsService.queryRetain(vo);
		
	}
	
	/**
	 * ltv
	 * @param method
	 * @param startDate
	 * @param endDate
	 */
	private Map<String, Long> queryRetainIncome(String method,String startDate, String endDate){
		BuyFlowRetainIncomeStats vo = new BuyFlowRetainIncomeStats();
		vo.setStartDate(startDate);
		vo.setEndDate(endDate);
		// 0-7日总付费，key like 2000_1_WeAD_1_20170608_7
		return buyFlowRetainIncomeStatsService.queryRetainIncome(vo);
	}
	
	
	
}
 