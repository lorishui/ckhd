package me.ckhd.opengame.online.handle;

import java.util.Arrays;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import me.ckhd.opengame.app.entity.PayInfoConfig;
import me.ckhd.opengame.common.utils.CoderUtils;
import me.ckhd.opengame.common.utils.StringUtils;
import me.ckhd.opengame.online.entity.OnlinePay;
import me.ckhd.opengame.online.entity.OnlineUser;
import me.ckhd.opengame.util.HttpClientUtils;

import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Component;

import com.alibaba.fastjson.JSONObject;

@Component("sougo")
@Scope("prototype")
public class sougoHandle extends BaseHandle{
	
	private static final String login_test_url = "http://dev.sdk.g.sogou.com/api/v2/login/verify";
	private static final String login_url = "http://gamesdk.sogou.com/api/v2/login/verify";
	
	@Override
	public String login(OnlineUser onlineUser, JSONObject codeJson,
			PayInfoConfig payInfo) {
		JSONObject result = new JSONObject();
		result.put("resultCode", -1);
		JSONObject verifyInfo = codeJson.getJSONObject("verifyInfo");
		onlineUser.setSid(verifyInfo.getString("userId"));
		String url = login_url;
		if( codeJson.containsKey("isTest") && 1 == codeJson.getInteger("isTest") ){
			url = login_test_url;
		}
		String respStr = HttpClientUtils.post(url, "gid="+payInfo.getCkAppId()+"&userId="+verifyInfo.getString("userId")
				+"&sessionKey="+verifyInfo.getString("sessionKey")+"&auth="+verifyInfo.getString("auth"), 10000, 10000);
		if( StringUtils.isNotBlank(respStr) ){
			JSONObject respJson = JSONObject.parseObject(respStr);
			if( respJson.containsKey("code") && 0 == respJson.getInteger("code") ){
				returnLoginSuccess(result, onlineUser);
			}else{
				result.put("errMsg", "用户验证失败！");
			}
		}else{
			result.put("errMsg", "数据为空或者请求失败！");
		}
		return result.toJSONString();
	}

	@Override
	public void parseParamter(String code, HttpServletRequest request,
			OnlinePay onlinePay) {
		for(Object key:request.getParameterMap().keySet()){
			respData.put(key+"", request.getParameter(key+""));
		}
		if(respData.size() > 0){
			onlinePay.setOrderId(respData.getString("appdata"));
			onlinePay.setActualAmount(respData.containsKey("amount1")?respData.getDouble("amount1")*100+"":"0");
			onlinePay.setCallBackContent(StringUtils.isNotBlank(code)?code:respData.toJSONString());
			onlinePay.setChannelOrderId(respData.getString("oid"));
		}
	}

	@Override
	public String verifyData(OnlinePay onlinePay, JSONObject result,
			HttpServletResponse response) {
		String sign = respData.getString("auth");
		String singContent = getSignContent()+onlinePay.getPayInfoConfig().getAppkey();
		String signNew = CoderUtils.md5(singContent, "utf-8");
		if( sign.equals(signNew) ){
			result.put("code", 2000);
			return getReturnSuccess();
		}else{
			result.put("code", 4006);
			result.put("errMsg", "验证错误！");
			return getReturnFailure();
		}
	}

	@Override
	public String getReturnSuccess() {
		return "OK";
	}

	@Override
	public String getReturnFailure() {
		return "ERR_200";
	}
	
	private String getSignContent(){
		Object[] obj = respData.keySet().toArray();
		Arrays.sort(obj);
		StringBuffer sb = new StringBuffer();
		for(Object key:obj){
			if(!"auth".equals(key)){
				sb.append(key).append("=").append(respData.get(key)).append("&");
			}
		}
		return sb.toString();
	}

}
