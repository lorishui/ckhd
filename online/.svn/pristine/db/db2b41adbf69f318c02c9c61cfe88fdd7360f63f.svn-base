package me.ckhd.opengame.online.handle;

import java.util.HashMap;
import java.util.Map;
import java.util.Random;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import me.ckhd.opengame.app.entity.PayInfoConfig;
import me.ckhd.opengame.common.utils.CoderUtils;
import me.ckhd.opengame.common.utils.DateUtils;
import me.ckhd.opengame.common.utils.SignContext;
import me.ckhd.opengame.common.utils.StringUtils;
import me.ckhd.opengame.online.entity.OnlinePay;
import me.ckhd.opengame.online.entity.OnlineUser;
import me.ckhd.opengame.online.util.XmlUtils;
import me.ckhd.opengame.util.HttpClientUtils;

import org.springframework.stereotype.Component;

import com.alibaba.fastjson.JSONObject;

@Component("wftNew")
public class wftNewHandle extends BaseHandle{

	private final static String pay_url = "https://pay.swiftpass.cn/pay/gateway";
	
	@Override
	public String login(OnlineUser onlineUser, JSONObject codeJson,
			PayInfoConfig payInfo) {
		return null;
	}

	@Override
	public String pay(OnlinePay onlinePay, JSONObject codeJson) {
		JSONObject result = new JSONObject();
		result.put("resultCode",-1);
		Map<String,Object> map = new HashMap<String, Object>();
		map.put("service","unified.trade.pay");
		map.put("version","2.0");
		map.put("charset","UTF-8");
		map.put("mch_id",onlinePay.getAppId());
		map.put("out_trade_no",onlinePay.getOrderId());
		map.put("body",onlinePay.getPayCodeConfig().getProductName());
		map.put("total_fee",onlinePay.getPrices());
		map.put("notify_url",onlinePay.getPayInfoConfig().getNotifyUrl());
		map.put("time_start", DateUtils.getDate("yyyyMMddHHmmss"));
		map.put("nonce_str", getRandomStr());
		String key = onlinePay.getPayInfoConfig().getAppkey();
		String content = SignContext.getSignContext(map);
		log.info("wft new pay sign content="+content);
		log.info("wft new pay sign key="+key);
		String sign = CoderUtils.md5(content+"&"+key, "utf-8").toUpperCase();
		log.info("wft new pay sign="+sign);
		map.put("sign", sign);
		String reqStr = XmlUtils.toXml(map);
		String respStr = HttpClientUtils.post(pay_url, reqStr, 10000, 10000);
		if(StringUtils.isNotBlank(respStr)){
			Map<String, Object> respMap = XmlUtils.decodeXml(respStr);
//			JSONObject json = (JSONObject) JSONObject.toJSON(respMap);
			if( respMap.containsKey("status") && "0".equals(respMap.get("status")) ){
				result.put("resultCode",0);
				result.put("errMsg","SUCCESS");
				JSONObject data = new JSONObject();
				data.put("orderId", onlinePay.getOrderId());
				data.put("callBackUrl", onlinePay.getPayInfoConfig().getNotifyUrl());
				data.put("token_id", map.get("token_id"));
				data.put("services", map.get("services"));
//				data.put("sign", map.get("sign"));
				result.put("result", data);
			}else{
				result.put("resultCode", 4002);
				result.put("errMsg", "wft下单失败！");
			}
		}else{
			result.put("resultCode", 4001);
			result.put("errMsg", "请求失败，请重新请求");
		}
		return result.toJSONString();
	}
	
	private String getRandomStr(){
		String str = "abcdefghijklmnopqrstuvwsyzABCDEFGHIJKLMNOPQRSTUVWSYZ1234567890";
		StringBuffer sb = new StringBuffer();
		Random random = new Random();
		for(int i=0;i<16;i++){
			sb.append(str.charAt(random.nextInt(61)));
		}
		return sb.toString();
	}
	
	@Override
	public void parseParamter(String code, HttpServletRequest request,
			OnlinePay onlinePay) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public String verifyData(OnlinePay onlinePay, JSONObject result,
			HttpServletResponse response) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String getReturnSuccess() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String getReturnFailure() {
		// TODO Auto-generated method stub
		return null;
	}

}
