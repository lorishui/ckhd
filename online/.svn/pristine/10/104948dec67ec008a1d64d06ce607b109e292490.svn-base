package me.ckhd.opengame.online.task;

import java.lang.reflect.InvocationTargetException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import me.ckhd.opengame.app.entity.APPCk;
import me.ckhd.opengame.app.entity.Channel;
import me.ckhd.opengame.app.entity.PayCodeConfig;
import me.ckhd.opengame.app.entity.PayInfoConfig;
import me.ckhd.opengame.app.service.MmextendCfgService;
import me.ckhd.opengame.app.utils.AppCkUtils;
import me.ckhd.opengame.common.utils.MyJsonUtils;
import me.ckhd.opengame.common.utils.RedisClientTemplate;
import me.ckhd.opengame.common.web.BaseController;
import me.ckhd.opengame.online.entity.OnlinePay;
import me.ckhd.opengame.online.request.BaseOtherRequest;
import me.ckhd.opengame.online.service.OnlineService;
import me.ckhd.opengame.online.util.OrderStatus;
import me.ckhd.opengame.sys.entity.Dict;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;

/**
 * 与前端对接
 * 
 * @author leo
 *
 */
@Controller
@RequestMapping(value = "${adminPath}/online/app")
public class AppOnlineApi extends BaseController {

	@Autowired
	private OnlineService onlineService;
	
	@Autowired
	private MmextendCfgService mmextendCfgService;
	
	@Autowired
	private RedisClientTemplate redisClientTemplate;

	private String reqeustOtherPackage = "me.ckhd.opengame.online.request.%s.OtherRequest";

	
	private String getChannel(Map<String, Object> map) {
		// 通过参数获取到渠道ID
		String channelId = map.get("ckChannelId").toString();
		// 通过渠道ID获取到渠道信息
		Channel channel = onlineService.getChannelById(channelId);
		return channel.getEngName();
	}

	private String getDict(String paytype) {
		// 通过渠道ID获取到渠道信息
		Dict dict = onlineService.getpayTypeDict(paytype);
		return dict.getDescription();
	}
	
	/**
	 * 反射获取OtherRequest
	 * 
	 * @param channelEngName
	 * @param code
	 * @return
	 */
	private BaseOtherRequest getOtherRequest(String channelEngName,OnlinePay onlinePay) {

		BaseOtherRequest baseOterRequest = null;
		try {
			Class<?> cla = Class.forName(String.format(reqeustOtherPackage,
					channelEngName));
			baseOterRequest = (BaseOtherRequest) cla.getConstructor(OnlinePay.class).newInstance(onlinePay);
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		} catch (InstantiationException e) {
			e.printStackTrace();
		} catch (IllegalAccessException e) {
			e.printStackTrace();
		} catch (IllegalArgumentException e) {
			e.printStackTrace();
		} catch (InvocationTargetException e) {
			e.printStackTrace();
		} catch (NoSuchMethodException e) {
			e.printStackTrace();
		} catch (SecurityException e) {
			e.printStackTrace();
		}
		return baseOterRequest;

	}

	@RequestMapping(value = "other/{sdkName}")
	@ResponseBody
	public String other(@RequestBody String code, HttpServletRequest request,HttpServletResponse response,@PathVariable String sdkName) {
		OnlinePay onlinePay = new OnlinePay();
		String returnStr = "{\"resultCode\":-1}";
		try {
			logger.info(String.format("客户端上传的支付数据:[%s]", code));
			// 根据客户端上传数据解析成Map
			Map<String, Object> codeMap = MyJsonUtils.jsonStr2Map(code);
//			String ckappid = (codeMap.containsKey("ckAppId")?codeMap.get("ckAppId").toString():null);
//			String channelId = (codeMap.containsKey("channelId")?codeMap.get("channelId").toString():null);
			String orderId = (codeMap.containsKey("orderId")?codeMap.get("orderId").toString():null);
			//查询订单
			if(orderId!=null){
				onlinePay = onlineService.getOrderByOrderId(orderId);
			}
			if( onlinePay.getOrderStatus().equals(OrderStatus.PAY_SUCCESS) ){
				return "{\"resultCode\":0}";
			}
			onlinePay.setPayMap(codeMap);
			// 获取已配置支付信息
			PayInfoConfig payInfoConfig = getPayInfo(codeMap);
			if(payInfoConfig==null){
				String errMsg = "未配置支付基本信息";
				throw new Exception(errMsg);
			}
			APPCk appCk =AppCkUtils.getAppCkById(onlinePay.getCkAppId());
			if( appCk != null ){
				onlinePay.setSercetKey(appCk.getSecretKey());
			}
			onlinePay.setPayInfoConfig(payInfoConfig);
			if(sdkName != null && sdkName.length() > 0){
				// 生成payRequest
				BaseOtherRequest otherRequest = getOtherRequest(sdkName, onlinePay);
				if(otherRequest==null){
					String errMsg = "支付失败,上传的数据有误!";
					onlinePay.setOrderStatus(OrderStatus.CREATE_PAYMENT_FAIL);
					onlinePay.setErrMsg(errMsg);
					throw new Exception(errMsg);
				}
				// 返回数据到客户端
				returnStr = otherRequest.call();
			}
		} catch (Exception e) {
			logger.error(" other request failure!",e);
		}
		logger.info(String.format("返回客户端的支付数据:[%s]", returnStr));
		return returnStr;
	}
	
	/**
	 * TODO 前端调用后台获取支付数据/订单号
	 * 
	 * @return
	 */
	@RequestMapping(value = "init")
	@ResponseBody
	public String init(@RequestBody String code, HttpServletRequest request,HttpServletResponse response) {
		String returnStr="";
		JSONObject json = new JSONObject();
		JSONObject result = new JSONObject();
		result.put("code", "-1");
		result.put("msg", "Internal server error");
		json.put("result", result);
		logger.info(String.format("客户端上传的支付数据:[%s]", code));
		// 根据客户端上传数据解析成Map
		Map<String, Object> codeMap = MyJsonUtils.jsonStr2Map(code);
		PayInfoConfig payInfoConfig = getPayInfo(codeMap);
		
		List<PayCodeConfig> payCodeConfig = null;
		if( codeMap != null && codeMap.get("isPayCode") != null && codeMap.get("isPayCode").toString().equals("1")){
			//获取已配置的计费点信息
			payCodeConfig = getPayCodeConfigArray(codeMap);
			if(payCodeConfig != null){
				JSONArray payArray = new JSONArray();
				for(PayCodeConfig payCode:payCodeConfig){
					JSONObject pay = new JSONObject();
					pay.put("productid", payCode.getProductId());
					if( payCode.getExInfoMap() != null ){
						pay.put("payCode", payCode.getExInfoMap().get("payCode"));
						if(payCode.getExInfoMap().containsKey("useOtherPay")){
							pay.put("useOtherPay", 1);
						}
					}
					pay.put("price", payCode.getPrice());
					payArray.add(pay);
				}
				json.put("payCode", payArray);
				result.put("code", 0);
				result.put("msg", "success");
			}
		}
		
		JSONObject payInfo = new JSONObject();
		if(payInfoConfig != null ){
			payInfo.put("appId",payInfoConfig.getAppid());
			payInfo.put("appKey",payInfoConfig.getAppkey());
			result.put("code", 0);
			result.put("msg", "success");
		}
		json.put("payInfo", payInfo);
		returnStr = json.toJSONString();
		logger.info(String.format("返回客户端的支付数据:[%s]", returnStr));
		return returnStr;
	}	
	
	public PayInfoConfig getLoginInfo(Map<String, Object> map) {
		PayInfoConfig payInfo = new PayInfoConfig();
		payInfo.setCkAppId(map.get("ckAppId")==null?"":map.get("ckAppId").toString());
		payInfo.setChannelId(map.get("ckChannelId")==null?"":map.get("ckChannelId").toString());
		payInfo.setCarrierAppId(map.get("mmAppId")==null?"":map.get("mmAppId").toString());
		return  onlineService.getLoginInfo(payInfo);
	}
	
	public PayInfoConfig getPayInfo(Map<String, Object> map) {
		PayInfoConfig payInfo = new PayInfoConfig();
		payInfo.setCkAppId(map.get("ckAppId")==null?"":map.get("ckAppId").toString());
		payInfo.setPaytype(map.get("payType")==null?"":map.get("payType").toString());
		payInfo.setChannelId(map.get("ckChannelId")==null?"":map.get("ckChannelId").toString());
		payInfo.setCarrierAppId(map.get("mmAppId")==null?"":map.get("mmAppId").toString());
		return  onlineService.getPayInfo(payInfo);
	}

	public PayCodeConfig getPayCodeConfig(Map<String, Object> map){
		PayCodeConfig payCodeConfig = new PayCodeConfig();
		payCodeConfig.setCkAppId(map.get("ckAppId")==null?"":map.get("ckAppId").toString());
		payCodeConfig.setChannelId(map.get("ckChannelId")==null?"":map.get("ckChannelId").toString());
		if(map.containsKey("payType") && StringUtils.isNotBlank((String)map.get("payType"))){
			Integer payType = Integer.valueOf(map.get("payType").toString());
			if( payType > 120){
				payCodeConfig.setPaytype("141");
			}else{
				payCodeConfig.setPaytype(map.get("payType")==null?"":map.get("payType").toString());
			}
		}else{
			payCodeConfig.setPaytype("");
		}
		payCodeConfig.setProductId(map.get("productId")==null?"":map.get("productId").toString());
		return onlineService.getPayCode(payCodeConfig);
	}

	public List<PayCodeConfig> getPayCodeConfigArray(Map<String, Object> map){
		PayCodeConfig payCodeConfig = new PayCodeConfig();
		payCodeConfig.setCkAppId(map.get("ckAppId")==null?"":map.get("ckAppId").toString());
		payCodeConfig.setChannelId(map.get("ckChannelId")==null?"":map.get("ckChannelId").toString());
		payCodeConfig.setPaytype(map.get("payType")==null?"":map.get("payType").toString());
//		return onlineService.getPayCode(payCodeConfig);
		return onlineService.getPayCodeArray(payCodeConfig);
	}
	/**
	 * 获取到pay包名需替换的字符串
	 * @param code
	 * @return
	 */
	public String getPayType(Map<String, Object> map) {
		String paytype = map.get("payType").toString();
		if ("141".equals(paytype)) {
			String engName = getChannel(map);
			return engName;
		} else {
			String description = getDict(paytype);
			return description;
		}
	}
	
	/**
	 * 前端获取支付折扣
	 * 
	 * @return
	 */
	@RequestMapping(value = "getPayTypeConvert")
	@ResponseBody
	public Map<String, Object> getPayTypeConvert(PayInfoConfig payInfoConfig) {
		logger.info(String.format("客户端上传的数据:[%s]", payInfoConfig.toString()));
		
		// 获取已配置支付信息
		PayInfoConfig payInfo =onlineService.getPayInfo(payInfoConfig); 
		Map<String, Object> map = new HashMap<String, Object>();
		if(payInfo==null){
			map.put("resultCode", -1);
			map.put("errMsg", "未配置支付折扣信息!");
		}else{
			map.put("resultCode", 0);
			map.put("result",payInfo);
		}
		return map;
	}

}
