package me.ckhd.opengame.online.handle;

import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import me.ckhd.opengame.app.entity.PayInfoConfig;
import me.ckhd.opengame.common.utils.CoderUtils;
import me.ckhd.opengame.common.utils.StringUtils;
import me.ckhd.opengame.online.entity.OnlinePay;
import me.ckhd.opengame.online.entity.OnlineUser;
import me.ckhd.opengame.util.HttpClientUtils;

import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Component;

import com.alibaba.fastjson.JSONObject;

/**
 * 卓易
 * @author liupei
 */
@Component("zhuoyi")
@Scope("prototype")
public class droiHandle extends BaseHandle{

	private static String verify_url = "http://open.zhuoyi.com/phone/index.php/ILoginAuth/auth";
	private Map<String,String> resquestMap = new HashMap<String, String>();
	
	@Override
	public String login(OnlineUser onlineUser, JSONObject codeJson,
			PayInfoConfig payInfo) {
		JSONObject result = new JSONObject();
		result.put("resultCode", -1);
		JSONObject verifyInfo = codeJson.getJSONObject("verifyInfo");
		String uid = verifyInfo.containsKey("openId")?verifyInfo.getString("openId"):"";
		onlineUser.setSid(uid);
		String access_token = verifyInfo.containsKey("accessToken")?verifyInfo.getString("accessToken"):"";
		String app_id = payInfo.getAppid();
		//sign = md5(uid=xxx&access_token=xxx&app_id=xxx&key=server_key)
		String sign = CoderUtils.md5("uid="+uid+"&access_token="+access_token+"&app_id="+app_id+"&key="+payInfo.getAppkey(), "utf-8");
		String data = "uid="+uid+"&access_token="+access_token+"&app_id="+app_id+"&sign="+sign;
		String responseData = HttpClientUtils.get(verify_url, data, 10000, 10000);
		if( StringUtils.isNotBlank(responseData) ){
			JSONObject json = JSONObject.parseObject(responseData);
			if( json.containsKey("code") && 0 == json.getInteger("code") ){
				returnLoginSuccess(result, onlineUser);
			}else{
				result.put("errMsg", "登录验证不正确!");
			}
		}
		return result.toJSONString();
	}

	@Override
	public void parseParamter(String code, HttpServletRequest request,
			OnlinePay onlinePay) {
		@SuppressWarnings("unchecked")
		Set<String> set = request.getParameterMap().keySet();
		for( String key : set ){
			respData.put(key, request.getParameter(key));
			resquestMap.put(key, (String)request.getParameter(key));
		}
		if(respData.size() > 0){
			onlinePay.setOrderId(respData.getString("Urecharge_Id"));
			onlinePay.setActualAmount(respData.containsKey("Recharge_Money")?respData.getDouble("Recharge_Money")*100+"":"0");
			onlinePay.setCallBackContent(StringUtils.isNotBlank(code)?code:respData.toJSONString());
			onlinePay.setChannelOrderId(respData.getString("Recharge_Id"));
		}
	}

	@Override
	public String verifyData(OnlinePay onlinePay, JSONObject result,
			HttpServletResponse response) {
		boolean isSign = false;
		try {
			String key = onlinePay.getPayInfoConfig().getAppkey();
			String signData = getSignContent(key);
			String signNew = CoderUtils.md5(signData, "utf-8");
			isSign = respData.containsKey("Sign") && respData.getString("Sign").equals(signNew);
		} catch (Throwable e) {
			log.error("droi validate ERROR!", e);
		}
		if(isSign && onlinePay.getPrices() == Integer.parseInt(onlinePay.getActualAmount()) ){
			result.put("code", 2000);
			return getReturnSuccess();
		}else{
			result.put("code", 4006);
			result.put("errMsg", "验证错误！");
			return getReturnFailure();
		}
	}

	@Override
	public String getReturnSuccess() {
		return "success";
	}

	@Override
	public String getReturnFailure() {
		return "failure";
	}
	
	private String getSignContent(String key){
		Object[] keys = respData.keySet().toArray();
		Arrays.sort(keys);
		StringBuffer sb = new StringBuffer();
		for(Object jkey:keys){
			if(!"Sign".equals(jkey)){
				sb.append(jkey).append("=").append(respData.get(jkey)).append("&");
			}
		}
		if( sb.length() > 0){
			sb.setLength(sb.length()-1);
		}
		sb.append(key);
		return sb.toString();
	}

}
