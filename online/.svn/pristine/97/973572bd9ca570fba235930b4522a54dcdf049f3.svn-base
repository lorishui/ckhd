package me.ckhd.opengame.stats.web;

import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

import me.ckhd.opengame.common.persistence.Verdict;
import me.ckhd.opengame.common.utils.StringUtils;
import me.ckhd.opengame.common.web.BaseController;
import me.ckhd.opengame.stats.entity.StatRelated;
import me.ckhd.opengame.stats.entity.StatRetention;
import me.ckhd.opengame.stats.service.StatRelateService;
import me.ckhd.opengame.stats.service.StatRetentionService;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;

@RequestMapping(value = "${adminPath}/stats")
@Controller
public class StatRetentionController extends BaseController {
	
	@Autowired
	private StatRetentionService srdService;
	@Autowired
	private	StatRelateService deviceService;
	
	
	@RequestMapping("retention")
	public String statRetention(StatRetention statRetentionData,Model model ){
		if ( !Verdict.isAllow(statRetentionData.getCkAppId())) {
			return "403";
		}
		StatRetention param = null;
		List<StatRetention> list = null;
		try {
			param = (StatRetention) statRetentionData.clone();
			StatRelated statRelated =  getStatRelated(statRetentionData);
			Calendar cal = Calendar.getInstance();
			cal.setTime(new Date());
			if( StringUtils.isBlank(statRetentionData.getStartTime()) || StringUtils.isBlank(statRetentionData.getEndTime()) ){
				SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd");
				SimpleDateFormat sdf2 = new SimpleDateFormat("yyyy-MM-dd");
				cal.add(Calendar.DAY_OF_MONTH, -2);
				statRetentionData.setEndTime(sdf.format(cal.getTime()));
				statRelated.setEndTime(statRetentionData.getEndTime());
				param.setEndTime(sdf2.format(cal.getTime()));

				cal.add(Calendar.DAY_OF_MONTH, -5);
				statRetentionData.setStartTime(sdf.format(cal.getTime()));
				statRelated.setStartTime(statRetentionData.getStartTime());
				param.setStartTime(sdf2.format(cal.getTime()));
			}else{
				statRetentionData.setStartTime(statRetentionData.getStartTime().replace("-", ""));
				statRetentionData.setEndTime(statRetentionData.getEndTime().replace("-", ""));
				statRelated.setEndTime(statRetentionData.getEndTime());
				statRelated.setStartTime(statRetentionData.getStartTime());
			}
			list = srdService.statsData(statRetentionData);
			List<StatRelated> deviceList = deviceService.getTotalNum(statRelated);
			combainData(list,deviceList);
		} catch (Exception e) {
			logger.error("", e);
		}
		model.addAttribute("data", list);
		model.addAttribute("statRetentionData",param);
		return "modules/stats/statRetentionData";
	}
	

	private void combainData(List<StatRetention> list, List<StatRelated> deviceList) {
		for (StatRelated statRelated : deviceList) {
			for (StatRetention srd : list) {
				if(statRelated.getTimeframes().equals(srd.getRegTime())){
					srd.setTotalNum(statRelated.getNewNum());
				}
			}
		}
	}


	private StatRelated getStatRelated(StatRetention srd){
		StatRelated statRelated = new StatRelated();
		if(StringUtils.isNotBlank(srd.getCkAppId())){
			statRelated.setCkAppId(srd.getCkAppId());
		}
		if(StringUtils.isNotBlank(srd.getChildCkAppId())){
			statRelated.setCkAppId(srd.getChildCkAppId());
		}
		if(StringUtils.isNotBlank(srd.getCkChannelId())){
			statRelated.setCkAppId(srd.getCkChannelId());
		}
		if(StringUtils.isNotBlank(srd.getChildChannelId())){
			statRelated.setCkAppId(srd.getChildChannelId());
		}
		return statRelated;
	}
	



	
}
