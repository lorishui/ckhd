package me.ckhd.opengame.app.utils;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Map;

import me.ckhd.opengame.app.dao.APPCkDao;
import me.ckhd.opengame.app.entity.APPCk;
import me.ckhd.opengame.common.utils.CacheUtils;
import me.ckhd.opengame.common.utils.SpringContextHolder;
import me.ckhd.opengame.sys.entity.Role;
import me.ckhd.opengame.sys.entity.User;
import me.ckhd.opengame.sys.utils.UserUtils;

import org.apache.commons.lang3.StringUtils;

import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
public class AppCkUtils {
	
	private static APPCkDao appCkDao = SpringContextHolder.getBean(APPCkDao.class);
	public static final String CACHE_APPCK_MAP = "appckMap";
	/**
	 * 根据用户权限控制游戏展示
	 * @return
	 */
	public static List<APPCk> getAPPCkList(){
		@SuppressWarnings("unchecked")
		Map<String, List<APPCk>> appckMap = (Map<String, List<APPCk>>)CacheUtils.get(CACHE_APPCK_MAP);
		if (appckMap==null){
			appckMap = Maps.newHashMap();
			for (APPCk appck : appCkDao.findAllList(new APPCk())){
				// 名称带上ckappid
				appck.setName(appck.getName() + "(" + appck.getCkappId() +")");
				
				List<APPCk> appckList = appckMap.get("ALL");
				if (appckList != null){
					appckList.add(appck);
				}else{
					appckMap.put("ALL", Lists.newArrayList(appck));
				}
			}
			CacheUtils.put(CACHE_APPCK_MAP, appckMap);
		}
		List<APPCk> appckList = appckMap.get("ALL");
		User user = UserUtils.getUser();
		// user为空不显示列表
		if (appckList == null || user == null){
			appckList = Lists.newArrayList();
		}
		String ckappId = "";
		String[] ckappIds = null;
		List<String> userList = new ArrayList<String>();
		for(Role role : user.getRoleList()){
			if(ckappId != null && !"".equals(ckappId)){
				ckappId += ",";
			}
			ckappId += role.getCkappIds();
		}
		ckappIds = ckappId.split(",");
		Collections.addAll(userList, ckappIds);
		List<APPCk> returnList = new ArrayList<APPCk>();
		for(APPCk appck:appckList){
			if(userList.contains(appck.getCkappId())){
				returnList.add(appck);
			}
		}
		if(returnList != null &&returnList.size()>0){
			return returnList;
		}else{
			return appckList;
		}
	}
	
	public static List<APPCk> getAPPCkLists(){
		@SuppressWarnings("unchecked")
		Map<String, List<APPCk>> appckMap = (Map<String, List<APPCk>>)CacheUtils.get(CACHE_APPCK_MAP);
		if (appckMap==null){
			appckMap = Maps.newHashMap();
			for (APPCk appck : appCkDao.findAllList(new APPCk())){
				List<APPCk> appckList = appckMap.get("ALL");
				if (appckList != null){
					appckList.add(appck);
				}else{
					appckMap.put("ALL", Lists.newArrayList(appck));
				}
			}
			CacheUtils.put(CACHE_APPCK_MAP, appckMap);
		}
		List<APPCk> appckList = appckMap.get("ALL");
		User user = UserUtils.getUser();
		if (appckList == null || user == null){
			appckList = Lists.newArrayList();
		}
		return appckList;
	}
	
	public static String getByCkAppName(String ckappId){
		String name = (String) CacheUtils.get("CKAPP_ID_" + ckappId);
		if(name == null){
			if(StringUtils.isNoneBlank(ckappId)){
				name = appCkDao.getCkAppName(ckappId);
				return name;
			}
		} else {
			return name;
		}
		return "";
	}
	/**
	 * 根据id获取ckapp
	 * @param ckappId
	 * @return
	 */
	@SuppressWarnings("unchecked")
	public static APPCk getAppCkById(String ckappId){
		if(StringUtils.isEmpty(ckappId)){
			return null;
		}
		Map<String, List<APPCk>> appckMap = (Map<String, List<APPCk>>)CacheUtils.get(CACHE_APPCK_MAP);
		if (appckMap==null){
			appckMap = Maps.newHashMap();
			for (APPCk appck : appCkDao.findAllList(new APPCk())){
				List<APPCk> appckList = appckMap.get("ALL");
				if (appckList != null){
					appckList.add(appck);
				}else{
					appckMap.put("ALL", Lists.newArrayList(appck));
				}
			}
			CacheUtils.put(CACHE_APPCK_MAP, appckMap);
		}
		List<APPCk> appckList = appckMap.get("ALL");
		
		for(APPCk appCk:appckList){
			if(ckappId.equals(appCk.getCkappId())){
				return appCk;
			}
		}
		return null;
	}
}
