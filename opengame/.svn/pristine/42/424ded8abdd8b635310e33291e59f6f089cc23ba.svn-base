package me.ckhd.opengame.online.handle;

import java.net.URLDecoder;
import java.util.Arrays;
import java.util.Set;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import me.ckhd.opengame.app.entity.PayInfoConfig;
import me.ckhd.opengame.common.utils.StringUtils;
import me.ckhd.opengame.online.entity.OnlinePay;
import me.ckhd.opengame.online.entity.OnlineUser;
import me.ckhd.opengame.online.util.gionee.RSASignature;

import org.springframework.stereotype.Component;

import com.alibaba.fastjson.JSONObject;

@Component("gionee")
public class gioneeHandle extends BaseHandle{

	@Override
	public String login(OnlineUser onlineUser, JSONObject codeJson,
			PayInfoConfig payInfo) {
		return null;
	}

	@Override
	public void parseParamter(String code, HttpServletRequest request,
			OnlinePay onlinePay) {
		@SuppressWarnings("unchecked")
		Set<String> set = request.getParameterMap().keySet();
		for( String key : set ){
			respData.put(key, request.getParameter(key));
		}
		if(respData.size() > 0){
			onlinePay.setOrderId(respData.getString("out_order_no"));
			onlinePay.setActualAmount(respData.containsKey("deal_price")?(respData.getDouble("deal_price")*100)+"":"0");
			onlinePay.setCallBackContent(StringUtils.isNotBlank(code)?code:respData.toJSONString());
			onlinePay.setAppId(respData.getString("api_key"));//appid
		}
	}

	@Override
	public String verifyData(OnlinePay onlinePay,JSONObject result,HttpServletResponse response) {
		String content = getSignContext();
		boolean isSign = false;
		try {
			isSign = RSASignature.doCheck(content, URLDecoder.decode(respData.getString("sign"),"utf-8"), onlinePay.getPayInfoConfig().getAppkey(), "utf-8");
		} catch (Throwable e) {
			log.error("gionee RSA docheck ERROR!", e);
		}
		if(isSign){
			result.put("code", 2000);
			return getReturnSuccess();
		}else{
			result.put("code", 4006);
			result.put("errMsg", "验证错误！");
			return getReturnFailure();
		}
	}

	@Override
	public String getReturnSuccess() {
		return "success";
	}

	@Override
	public String getReturnFailure() {
		return "failure";
	}
	
	private String getSignContext(){
		Object[] obj = respData.keySet().toArray();
		Arrays.sort(obj);
		StringBuffer sb = new StringBuffer();
		for(Object key:obj){
			if( !"sign".equals(key)&& !"msg".equals(key) ){
				sb.append(key).append("=").append(respData.get(key)).append("&");
			}
		}
		sb.setLength(sb.length()>0?sb.length()-1:sb.length());
		return sb.toString();
	}
	
	public String pay(OnlinePay onlinePay,JSONObject codeJson){
		JSONObject result = new JSONObject();
		result.put("resultCode",0);
		result.put("errMsg","SUCCESS");
		JSONObject data = new JSONObject();
		data.put("outOrderNo", onlinePay.getOrderId());
		result.put("result", data);
		return result.toJSONString();
	}
}
