package me.ckhd.opengame.user.service;

import java.util.HashMap;
import java.util.Map;

import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import me.ckhd.opengame.common.service.CrudService;
import me.ckhd.opengame.user.dao.UserInfoDao;
import me.ckhd.opengame.user.entity.UserInfo;

@Service
@Transactional(readOnly = true)
public class UserInfoService extends CrudService<UserInfoDao, UserInfo>{
	public boolean isExist(String userAccount){
		Map<String,Object> map = new HashMap<String, Object>();
		map.put("n", userAccount.substring(userAccount.length()-1, userAccount.length()));
		map.put("userAccount", userAccount);
		int n = this.dao.isExist(map);
		return n==0?false:true;
	}
	
	@Transactional(readOnly = false)
	public int update(UserInfo userInfo){
		return this.dao.update(userInfo);
	}
	
	public boolean isBindEmailOrMobile(String userAccount,int type){
		Map<String,Object> map = new HashMap<String, Object>();
		map.put("n", userAccount.substring(userAccount.length()-1, userAccount.length()));
		map.put("userAccount", userAccount);
		UserInfo userInfo = this.dao.isBindEmailOrMobile(map);
		if(type == 1){
			if(userInfo.getBindMobile() != null && userInfo.getBindMobile().length() > 0){
				return true;
			}else{
				return false;
			}
		}else if(type == 2){
			if(userInfo.getBindEmail() != null && userInfo.getBindEmail().length() > 0){
				return true;
			}else{
				return false;
			}
		}
		return true;
	}
	
	@Transactional(readOnly = false)
	public int deleteEmail(String email){
		Map<String,Object> map = new HashMap<String, Object>();
		map.put("index", email.substring(0, 1));
		map.put("bindEmail", email);
		return this.dao.deleteEmail(map);
	}
	
	@Transactional(readOnly = false)
	public int insertEmail(String userAccount,String email){
		Map<String,Object> map = new HashMap<String, Object>();
		map.put("index", email.substring(0, 1));
		map.put("bindEmail", email);
		map.put("userAccount", userAccount);
		return this.dao.insertEmail(map);
	}
	
	public boolean isExistEmail(String email){
		Map<String,Object> map = new HashMap<String, Object>();
		map.put("index", email.substring(0, 1));
		map.put("bindEmail", email);
		int n = this.dao.isExistEmail(map);
		return n==0?false:true;
	}
	
	@Transactional(readOnly = false,rollbackFor={RuntimeException.class, Exception.class})
	public int saveUserByBindEmail(UserInfo userInfo){
		int u = update(userInfo);
		int i = insertEmail(userInfo.getUserAccount(), userInfo.getBindEmail());
		return u+i;
	}
	
	@Transactional(readOnly = false,rollbackFor={RuntimeException.class, Exception.class})
	public int saveUserByUnBindEmail(UserInfo userInfo){
		int d = deleteEmail(userInfo.getBindEmail());
		userInfo.setBindEmail("");
		int u = update(userInfo);
		return u+d;
	}
}
