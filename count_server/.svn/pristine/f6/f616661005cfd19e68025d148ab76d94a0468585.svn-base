<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:util="http://www.springframework.org/schema/util"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.0.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.0.xsd"
	default-lazy-init="true">

	<description>Spring Configuration</description>

	<!-- 加载配置属性文件 -->
	<context:property-placeholder ignore-unresolvable="true" location="classpath:count.properties" />

	<!-- 加载应用属性实例，可通过 @Value("#{APP_PROP['jdbc.driver']}") String jdbcDriver方式引用 -->
	<util:properties id="APP_PROP" location="classpath:count.properties" local-override="true" />
	
	<!-- 使用Annotation自动注册Bean，解决事物失效问题：在主容器中不扫描@Controller注解，在SpringMvc中只扫描@Controller注解。 -->
	<context:component-scan base-package="com.chkd.count"><!-- base-package 如果多个，用“,”分隔 -->
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
	</context:component-scan>
	
	<!-- 定义事务 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="onlineSource" />
	</bean>

	<!-- 配置 Annotation 驱动，扫描@Transactional注解的类定义事务 -->
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" />
							
	<!-- 数据源配置, 使用 BoneCP 数据库连接池 -->
	<bean id="onlineSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<!-- 数据源驱动类可不写，Druid默认会自动根据URL识别DriverClass -->
		<property name="driverClassName" value="${online.driver}" />

		<!-- 基本属性 url、user、password -->
		<property name="url" value="${online.url}" />
		<property name="username" value="${online.username}" />
		<property name="password" value="${online.password}" />

		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="${online.pool.init}" />
		<property name="minIdle" value="${online.pool.minIdle}" />
		<property name="maxActive" value="${online.pool.maxActive}" />

		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="60000" />

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />

		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />

		<property name="validationQuery" value="${online.testSql}" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />

		<!-- 配置监控统计拦截的filters -->
		<property name="filters" value="stat" />
	</bean>
	
	<!--online模板 -->
	<bean id="onlineTemplate"
        class="org.springframework.jdbc.core.JdbcTemplate" abstract="false" lazy-init="false">
        <property name="dataSource">
            <ref bean="onlineSource" />
        </property>
    </bean>
    
    <!-- event数据源配置, 使用 BoneCP 数据库连接池 -->
	<bean id="eventSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<!-- 数据源驱动类可不写，Druid默认会自动根据URL识别DriverClass -->
		<property name="driverClassName" value="${event.driver}" />

		<!-- 基本属性 url、user、password -->
		<property name="url" value="${event.url}" />
		<property name="username" value="${event.username}" />
		<property name="password" value="${event.password}" />

		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="${event.pool.init}" />
		<property name="minIdle" value="${event.pool.minIdle}" />
		<property name="maxActive" value="${event.pool.maxActive}" />

		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="60000" />

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />

		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />

		<property name="validationQuery" value="${event.testSql}" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />

		<!-- 配置监控统计拦截的filters -->
		<property name="filters" value="stat" />
	</bean>
	
	<!--event模板 -->
	<bean id="eventTemplate"
        class="org.springframework.jdbc.core.JdbcTemplate" abstract="false" lazy-init="false">
        <property name="dataSource">
            <ref bean="eventSource" />
        </property>
    </bean>
	 
	 <!-- 计划任务配置，用 @Service @Lazy(false)标注类，用@Scheduled(cron = "0 0 2 * * ?")标注方法 -->
	<task:executor id="executor" pool-size="10" />
	<task:scheduler id="scheduler" pool-size="10" />
	<task:annotation-driven scheduler="scheduler" executor="executor" proxy-target-class="true" />
	<!-- 使用MethodInvokingJobDetailFactoryBean，任务类可以不实现Job接口，通过targetMethod指定调用方法-->    
    <!-- 定义目标bean和bean中的方法 -->  
	<bean id="countJob" class="com.chkd.count.count.task.CountJob" />
	<bean id="countJobMethod" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject">
			<ref bean="countJob" />
		</property>
		<property name="targetMethod">  <!-- 要执行的方法名称 -->
			<value>execute</value>
		</property>
	</bean>
	
	<bean id="CountDayJob" class="com.chkd.count.count.task.CountDayJob" />
	<bean id="CountDayJobMethod" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject">
			<ref bean="CountDayJob" />
		</property>
		<property name="targetMethod">  <!-- 要执行的方法名称 -->
			<value>execute</value>
		</property>
	</bean>
	
	<!-- ======================== 调度触发器 ======================== -->
	<bean id="CronTriggerBean"  class="org.springframework.scheduling.quartz.CronTriggerBean">
		<property name="jobDetail" ref="countJobMethod"></property>
		<property name="cronExpression" value="0 0/3 * * * ? "></property>
	</bean>
	
	<!-- ======================== 每天调度触发器 ======================== -->
	<bean id="DayCronTriggerBean"  class="org.springframework.scheduling.quartz.CronTriggerBean">
		<property name="jobDetail" ref="CountDayJobMethod"></property>
		<property name="cronExpression" value="0 1 12 * * ? "></property>
	</bean>
	
	<!-- ======================== 调度工厂 ======================== -->
	<bean id="SpringJobSchedulerFactoryBean"
		class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="triggers">
			<list>
				<ref bean="CronTriggerBean" />
				<ref bean="DayCronTriggerBean" />
			</list>
		</property>
	</bean>
</beans>